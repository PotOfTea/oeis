package oeis

import (
	"fmt"
	"testing"

	"github.com/google/go-cmp/cmp"
)

// type AutoGenerated2 struct {
// 	Greeting string      `json:"greeting"`
// 	Query    string      `json:"query"`
// 	Count    int         `json:"count"`
// 	Start    int         `json:"start"`
// 	Results  interface{} `json:"results"`
// }

func TestValidateJson(t *testing.T) {

	tests := map[string]struct {
		input []byte
		want  OeisQuery
	}{
		"simple": {
			input: []byte(`{"greeting": "Foo","query": "1", "count": 1, "start": 0, "results": null}`),
			want: OeisQuery{ // b == Student{"Bob", 0}
				Greeting: "Foo",
				Query:    "1",
				Count:    1,
			},
		},
	}

	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			got, _ := validateJSON(tc.input)
			diff := cmp.Diff(tc.want, *got)
			if diff != "" {
				t.Fatalf(diff)
			}
		})
	}

	bJson := []byte(`{"greeting": "Foo","query": "1", "count": 1, "start": 0, "results": null}`)

	o, _ := validateJSON(bJson)
	fmt.Printf("Species: %s, Description: %s, %v", o.Greeting, o.Query, o.Results)
}
